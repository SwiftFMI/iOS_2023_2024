//
//  Model.swift
//  AdventsCalendar
//
//  Created by Emil Atanasov on 12/14/23.
//

import Foundation

/// –ò–∑–±—Ä–æ–∏–º —Ç–∏–ø, –∫–æ–π—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è —Ä–∞–∑–ª–∏—á–Ω–∏—Ç–µ –≤–∏–¥–æ–≤–µ –¥–Ω–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞.
enum WeekDay {
    /// –†–∞–±–æ—Ç–µ–Ω –¥–µ–Ω
    case workday
    /// –ü–æ—á–∏–≤–µ–Ω –¥–µ–Ω
    case weekend
    /// –ü—Ä–∞–∑–Ω–∏—á–µ–Ω –ø–æ—á–∏–≤–µ–Ω –¥–µ–Ω
    case holiday
}

extension Date {
    var weekDay: WeekDay {
        // –ø–æ–º–æ—â–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏
        func isWeekend(weekday: Int) -> Bool {
            return weekday == 0 || weekday == 6
        }
        
        func weekday(date: Date) -> Int {
           return Calendar.current.component(.weekday, from: date) - 1
        }
        
        return isWeekend(weekday: weekday(date: self)) ? .weekend : .workday
    }
}

/// –°—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–Ω –¥–µ–Ω. –ü—Ä–µ–¥—Å—Ç–∞–≤—è –µ–¥–∏–Ω –¥–µ–Ω –æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ –∏ —Ç–∏–ø—ä—Ç –¥–µ–Ω.
class CalendarDay {
    /// –¥–∞—Ç–∞, –∫–æ—è—Ç–æ —É–Ω–∏–∫–∞–ª–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è –µ–¥–∏–Ω –¥–µ–Ω –æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
    var date: Date
    /// –∏–∑—á–∏—Å–ª–∏–º–æ –ø—Ä–æ–ø—ä—Ä—Ç–∏, –∫–æ–µ—Ç–æ –Ω–∞ –±–∞–∑–∞—Ç–∞ –Ω–∞ –¥–∞—Ç–∞—Ç–∞ –∏ –æ—Ñ–∏—Ü–∏–∞–ª–Ω–∏—Ç–µ –ø—Ä–∞–∑–Ω–∏—Ü–∏ –æ–ø—Ä–µ–¥–µ–ª—è,
    /// –¥–∞–ª–∏ –¥–∞–¥–µ–Ω –¥–µ–Ω –µ –ø–æ—á–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ. –í—Å–∏—á–∫–∏ –¥–Ω–∏ –æ—Ç —É–∏–∫–µ–Ω–¥–∞ (—Å—ä–±–æ—Ç–∞ –∏ –Ω–µ–¥–µ–ª—è) —Å–∞ –ø–æ—á–∏–≤–Ω–∏.
    /// –í—Å–∏—á–∫–∏ –æ—Ñ–∏—Ü–∏–∞–ª–Ω–∏ –ø—Ä–∞–∑–Ω–∏—Ü–∏ —Å–∞ –ø—Ä–∞–∑–Ω–∏—á–Ω–∏ –ø–æ—á–∏–≤–Ω–∏ –¥–Ω–∏. –ê–∫–æ –ø—Ä–∞–∑–Ω–∏–∫ —Å–µ –ø–∞–¥–Ω–µ –≤ –Ω–µ–¥–µ–ª—è
    /// —Ç–æ–≥–∞–≤–∞ –∏ –ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫—ä—Ç –æ—Ç —Å–ª–µ–¥–≤–∞—â–∞—Ç–∞ —Å–µ–¥–º–∏—Ü–∞ –µ –ø—Ä–∞–∑–Ω–∏—á–Ω–æ –ø–æ—á–∏–≤–µ–Ω.
    var type: WeekDay
    /// –°–ø–∏—Å—ä–∫ —Å—ä—Å –∑–∞–¥–∞—á–∏
    var tasks: [TaskItem] = []
    var gift: Gift
    
    init(date: Date, type: WeekDay, tasks: [TaskItem], gift: Gift) {
        self.date = date
        self.type = type
        self.tasks = tasks
        self.gift = gift
    }
}

extension CalendarDay: Identifiable {
    var id: Date { date }
}

extension CalendarDay {
    /// –∫—ä–º –∫–æ–π –º–µ—Å–µ—Ü —Å–µ –æ—Ç–Ω–∞—Å—è —Ç–µ–∫—É—â–∏—è –¥–µ–Ω
    var month: Int {
        return date.month
    }
}

/// –°—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–æ—è—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤—è –∑–∞–¥–∞—á–∞.
struct TaskItem {
    /// –ò–º–µ –Ω–∞ –∑–∞–¥–∞—á–∞—Ç–∞
    var title: String
    /// –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–¥–∞—á–∞—Ç–∞
    var description: String = ""
    /// –î–∞–ª–∏ –∑–∞–¥–∞—á–∞—Ç–∞ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω–∞
    var isComplete: Bool
    let id = UUID()
}

extension TaskItem: Identifiable {
    
}


/// –°—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–æ—è—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤—è –µ–¥–∏–Ω –≤–∏–¥–µ–æ —Ñ–∞–π–ª.
struct Gift {
    var title: String
    var image: String
    let id = UUID()
}


extension Gift: Identifiable {
    
}

/// –ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ view-model-–∞
/// –ê–∫–æ –µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–æ–∂–µ –¥–∞ –ø—Ä–æ–º–µ–Ω–∏—Ç–µ —Ç–∏–ø–∞ –æ—Ç struct –Ω–∞ class

/// –¢–µ—Å—Ç–æ–≤–∏ –¥–∞–Ω–Ω–∏ –º–æ–∂–µ –¥–∞ –Ω–∞–º–µ—Ä–∏—Ç–µ —Ç—É–∫

extension CalendarDay {
    static var mocks: [CalendarDay] {
        var days = [CalendarDay]()
        
        let dec1 = Calendar.current.date(from: DateComponents(timeZone: TimeZone(identifier: "GMT"), year: 2023, month: 12, day: 1, hour: 0, minute: 0, second: 0, nanosecond: 0))!
        func isMonday(weekday: Int) -> Bool {
            return weekday == 1
        }
        
        func isWeekend(weekday: Int) -> Bool {
            return weekday == 0 || weekday == 6
        }
        
        func weekday(date: Date) -> Int {
           return Calendar.current.component(.weekday, from: date) - 1
        }
        
        // –Ω–∞–º–∏—Ä–∞–º–µ –¥–∞—Ç–∞—Ç–∞, –∫–æ—è—Ç–æ –µ –≤ –ø–æ–Ω–µ–¥–µ–ª–Ω–∏–∫ –Ω–∞ –ø—ä—Ä–≤–∞—Ç–∞ —Å–µ–¥–º–∏—Ü–∞
        var startDate = dec1

        while startDate.dateInMonth <= 24 {
            let type = isWeekend(weekday: weekday(date: startDate)) ? WeekDay.weekend : WeekDay.workday
            let day = CalendarDay(date: startDate, type: type, tasks: TaskItem.getTasks(), gift: Gift.mock)
            days.append(day)
            
            startDate = startDate.dayAfter
            // —Å—Ç–∏–≥–Ω–∞–ª–∏ —Å–º–µ –∫—Ä–∞—è –Ω–∞ —Å–µ–¥–º–∏—Ü–∞—Ç–∞, –º–∏–Ω–∞–≤–∞–º–µ –Ω–∞ —Å–ª–µ–¥–≤–∞—â–∞—Ç–∞
        }

        return days
    }
}

extension Gift {
    private static var gifts: [String] {
        ["üçè", "‚åöÔ∏è", "üì±", "üì∑", "üéôÔ∏è", "‚è∞", "üöú", "üçº", "üçØ" , "üéÖ"]
    }
    
    static var mock: Gift {
        Gift(title: "–ö–æ–ª–µ–¥–µ–Ω –ø–æ–¥–∞—Ä—ä–∫", image: randomItem(from: Gift.gifts))
    }
}

extension TaskItem {
    private static var numberOfTasks: [Int] {
        [1, 2, 3]
    }
    
    private static var tasks: [String] {
        ["–ù–∞–ø—Ä–∞–≤–∏ –¥–æ–º–∞—à–µ–Ω —Å–ª–∞–¥–æ–ª–µ–¥!",
         "–ù–∞—Ä–∏—Å—É–≤–∞–π —Å–µ–º–µ–π–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∞!",
         "–ü–æ–¥—Ä–µ–¥–∏ —Å–∏ —Å—Ç–∞—è—Ç–∞!",
         "–°–Ω–∏–º–∞–π —Å–µ —Å –ø—Ä–∏—è—Ç–µ–ª!",
         "–ù–∞—Ö—Ä–∞–Ω–∏ –ø—Ç–∏—á–∫–∏—Ç–µ –Ω–∞–≤—ä–Ω!",
         "–ù–∞–ø–∏—à–∏ —Å–∏ –¥–æ–º–∞—à–Ω–∏—Ç–µ!",
         "–†–∞–∑—Ö–æ–¥–∏ —Å–µ —Å –ø—Ä–∏—è—Ç–µ–ª–∏!",
         "–†–µ–¥–∏ LEGO —Å –ø—Ä–∏—è—Ç–µ–ª!",
         "–ù–∞—É—á–∏ –∑–∞ –∏–∑–ø–∏—Ç–∞ –ø–æ –ì–µ–æ–º–µ—Ç—Ä–∏—è!",
         "–ü—Ä–∞–∑–Ω—É–≤–∞–π —Å üéÖ",
         "–û–∫—Ä–∞—Å–∏ –∫–æ–ª–µ–¥–Ω–æ—Ç–æ –¥—ä—Ä–≤–æ!",
         "–û—Ç–∏–¥–∏ –Ω–∞ —Ñ—Ä–∏–∑—å–æ—Ä/–º–∞–Ω–∏–∫—é—Ä!",
         "–û—Ç–∏–¥–∏ –≤ –∑–æ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—Ç–∞ –≥—Ä–∞–¥–∏–Ω–∞!",
         "–ò–≥—Ä–∞–π –∫–æ–º–ø—é—Ç—ä—Ä–Ω–∞ –∏–≥—Ä–∞ –¥–Ω–µ—Å!",
         "–ò–≥—Ä–∞–π —Å –ø—Ä–∏—è—Ç–µ–ª–∏ –Ω–∞ –Ω–∞—Å—Ç–æ–ª–Ω–∞ –∏–≥—Ä–∞!"
        ]
    }
    
    static var mock: TaskItem {
        TaskItem(title: randomItem(from: tasks), isComplete: false)
    }
    
    static func getTasks() -> [TaskItem] {
        
        var numberOfTasks = randomItem(from: numberOfTasks)
        var tasks = [TaskItem]()
        while numberOfTasks > 0 {
            numberOfTasks -= 1
            let task = TaskItem.mock
            tasks.append(task)
        }
        return tasks
    }
}


func randomItem<T>(from:[T]) -> T {
    let index = Int(arc4random_uniform(UInt32(from.count)))
    return from[index]
}
